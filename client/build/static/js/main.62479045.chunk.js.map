{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["picture","WEB_SOCKET_HOST","App","props","test","document","addEventListener","e","which","setInterval","dispatchEvent","KeyboardEvent","altKey","bubbles","cancelBubble","cancelable","charCode","code","composed","ctrlKey","currentTarget","defaultPrevented","detail","eventPhase","isComposing","isTrusted","key","keyCode","type","init","a","canvas","refs","ctx","getContext","fillStyle","fillRect","width","height","setState","fps","state","socket","emit","rendering","paintInit","forEach","location","draw","drawing","drawingLocation","touches","clientX","offsetLeft","clientY","offsetTop","console","log","onDraw","offDraw","io","transports","on","data","push","this","setTimeout","className","onClick","id","ref","onMouseUp","onMouseDown","onMouseMove","onTouchStart","onTouchEnd","onTouchMove","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.62479045.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport io from \"socket.io-client\";\n\nlet picture = [];\nconst fps = 30;\n\nconst PORT = 3000;\nconst WEB_SOCKET_HOST = `ws://localhost:${PORT}`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socket: io(WEB_SOCKET_HOST, { transports: [\"websocket\"] }),\n      canvas: null,\n      ctx: null,\n      drawing: false,\n    };\n\n    // 실시간 드로잉\n    this.state.socket.on(\"draw\", async (data) => {\n      picture.push(data);\n    });\n\n    // 방문 랜더링\n    this.state.socket.on(\"drawInit\", async (data) => {\n      picture = data;\n      this.rendering();\n    });\n\n    // 캔버스 초기화\n    this.state.socket.on(\"paintInit\", (data) => {\n      const { canvas, ctx } = this.state;\n      picture = data;\n      ctx.fillStyle = \"white\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    });\n  }\n\n  componentDidMount() {\n    this.init();\n    setTimeout(this.test, 1000);\n  }\n\n  test = () => {\n    document.addEventListener(\"keydown\", (e) => {\n      if (e.which == 32) {\n      }\n    });\n\n    setInterval(() => {\n      const spaceKey = {\n        altKey: false,\n        bubbles: true,\n        cancelBubble: false,\n        cancelable: true,\n        charCode: 0,\n        code: \"Space\",\n        composed: true,\n        ctrlKey: false,\n        currentTarget: null,\n        defaultPrevented: false,\n        detail: 0,\n        eventPhase: 0,\n        isComposing: false,\n        isTrusted: true,\n        key: \" \",\n        keyCode: 32,\n        type: \"keydown\",\n        which: 32,\n      };\n\n      document.dispatchEvent(new KeyboardEvent(\"keydown\", spaceKey));\n    }, 1000);\n  };\n\n  init = async () => {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    await this.setState({ canvas });\n    await this.setState({ ctx });\n\n    const frame = fps / 1000;\n    this.state.socket.emit(\"drawInit\");\n    setInterval(() => this.rendering(), frame);\n  };\n\n  paintInit = () => {\n    this.state.socket.emit(\"paintInit\");\n  };\n\n  rendering = () => {\n    const { ctx } = this.state;\n    ctx.fillStyle = \"black\";\n    picture.forEach((location) => {\n      ctx.fillRect(location[0], location[1], 2, 2);\n    });\n  };\n\n  draw = (e) => {\n    const { canvas, ctx, drawing, socket } = this.state;\n\n    if (!drawing) {\n      return;\n    }\n\n    let drawingLocation = [0, 0];\n\n    if (e.touches) {\n      // 터치\n      drawingLocation = [\n        e.touches[0].clientX - canvas.offsetLeft,\n        e.touches[0].clientY - canvas.offsetTop,\n      ];\n    } else {\n      // 마우스\n      drawingLocation = [\n        e.clientX - canvas.offsetLeft,\n        e.clientY - canvas.offsetTop,\n      ];\n    }\n\n    // 클라이언트 랜더링\n    // picture.push(drawingLocation);\n\n    socket.emit(\"draw\", drawingLocation);\n    console.log(\"draw\", drawingLocation);\n  };\n\n  onDraw = () => {\n    this.setState({ drawing: true });\n    console.log(\"On!\");\n  };\n\n  offDraw = () => {\n    this.setState({ drawing: false });\n    console.log(\"Off!\");\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.paintInit}>초기화</button>\n        <div className=\"game\" id=\"game\">\n          <canvas\n            id=\"canvas\"\n            ref=\"canvas\"\n            width={600}\n            height={600}\n            onMouseUp={this.offDraw}\n            onMouseDown={this.onDraw}\n            onMouseMove={this.draw}\n            onTouchStart={this.onDraw}\n            onTouchEnd={this.offDraw}\n            onTouchMove={this.draw}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}